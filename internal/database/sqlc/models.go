// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type NotificationsMessageStatus string

const (
	NotificationsMessageStatusPending NotificationsMessageStatus = "pending"
	NotificationsMessageStatusSending NotificationsMessageStatus = "sending"
	NotificationsMessageStatusSent    NotificationsMessageStatus = "sent"
	NotificationsMessageStatusFailed  NotificationsMessageStatus = "failed"
)

func (e *NotificationsMessageStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NotificationsMessageStatus(s)
	case string:
		*e = NotificationsMessageStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for NotificationsMessageStatus: %T", src)
	}
	return nil
}

type NullNotificationsMessageStatus struct {
	NotificationsMessageStatus NotificationsMessageStatus `json:"notifications_message_status"`
	Valid                      bool                       `json:"valid"` // Valid is true if NotificationsMessageStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotificationsMessageStatus) Scan(value interface{}) error {
	if value == nil {
		ns.NotificationsMessageStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NotificationsMessageStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotificationsMessageStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NotificationsMessageStatus), nil
}

type NotificationsMessage struct {
	ID                   uuid.UUID                  `json:"id"`
	Content              string                     `json:"content"`
	RecipientPhoneNumber string                     `json:"recipient_phone_number"`
	Status               NotificationsMessageStatus `json:"status"`
	ExternalMessageID    pgtype.Text                `json:"external_message_id"`
	LastFailureReason    pgtype.Text                `json:"last_failure_reason"`
	CreatedAt            time.Time                  `json:"created_at"`
	UpdatedAt            time.Time                  `json:"updated_at"`
}
